name: deploy-conda-4

on:
    push:
        branches:
            - main
    release:
        types: 
            - published

jobs:
    build_wheels:
        name: Build wheels on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            
            - name: Setup Python 
              uses: actions/setup-python@v2

            - name: Install cibuildwheel
              run: |
                  python -m pip install cibuildwheel==1.11.0

            - name: Install numpy
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install --upgrade numpy

            - name: Install OpenMP and numpy for mac
              if: runner.os == 'macos'
              run: |
                  brew install libomp

            - name: Build wheels in linux with CUDA support
              run: python -m cibuildwheel --output-dir wheelhouse
              env:
                  CIBW_MANYLINUX_X86_64_IMAGE: sameli/manylinux2014_x86_64_cuda_11
                  # CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
                  CIBW_BUILD: "*-manylinux_x86_64 *-macosx_x86_64 *-win_amd64"
                  CIBW_SKIP: "pp* cp27-* cp35-*"
                  CIBW_BUILD_VERBOSITY: 1
            
            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: wheel-artifacts
                  path: ./wheelhouse/*.whl
                  retention-days: 1

    build_conda:
        needs: [build_wheels]
        name: Build conda on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
        
        # To upload to PyPI on every tag starting with 'v', use the following:
        # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        # To publish to pypi on each GitHub Release, use the following:
        # if: github.event_name == 'release' && github.event.action == 'published'
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Download artifacts
              uses: actions/download-artifact@v2
              with:
                  name: wheel-artifacts
                  path: dist

            - name: Setup Miniconda
              uses: conda-incubator/setup-miniconda@v2
              with:
                  auto-update-conda: true

            - name: Build and upload package
              shell: bash -l {0}
              run: |
                  conda install -y conda-build anaconda-client
                  conda config --set anaconda_upload yes
                  export PATH=$(conda info --root):$PATH
                  export PATH=$(conda info --root)/bin:$PATH
                  conda-build --output-folder . . -c s-ameli
              env:
                  CYTHON_BUILD_IN_SOURCE: '1'  # see setup.py. Avoids a bug when building with multiple python variants
                  ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
                 
            # The manylinux wheels (after repaired with auditwheel) are very
            # large in size. It is better to delete them. If we do not delete
            # them, however, they will be deleted after the retension days,
            # which I set to one day.
            - name: Delete artifacts
              uses: geekyeggo/delete-artifact@v1
              with:
                  name: wheel-artifacts

    test_conda:
        needs: [build_conda]
        name: Test on ${{ matrix.os }} and Python ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: [3.6, 3.7, 3.8, 3.9]

        steps:
            - name: Setup Miniconda
              uses: conda-incubator/setup-miniconda@v2
              with:
                  auto-update-conda: true
                  python-version: ${{ matrix.python-version }}
                  activate-environment: myenv

            - name: Checkout
              uses: actions/checkout@v2

              # Move source to avoid import from local folder
            - name: Rename source
              run: |
                  mv gaussian_proc gaussian_proc-DoNotImport
                  rm setup.cfg

            # This is to prevent the error "libomp is already initialized",
            # which occurs only in MacOS. To circumvent the error, the
            # following script will remove libomp.dylib from imate package, and
            # copies libomp.dylib from gaussian_proc to imate package.
            - name: Remove duplicate libomp
              if: matrix.os == 'macos-latest'
              run: |
                  export PATH=$(conda info --root):$PATH
                  export PATH=$(conda info --root)/bin:$PATH
                  chmod +x scripts/fix_libomp.sh
                  ./scripts/fix_libomp.sh "$(conda info --root)/bin/python"
              shell: bash

            - name: Test
              shell: bash -l {0}
              run: |
                  conda install -c s-ameli gaussian_proc -y
                  conda install pytest -y
                  pytest
